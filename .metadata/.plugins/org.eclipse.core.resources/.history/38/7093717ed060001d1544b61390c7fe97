package com.example.mysqlconnectiondbexample.controllers;

import java.math.BigInteger;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.example.mysqlconnectiondbexample.ResourceNotFoundException;
import com.example.mysqlconnectiondbexample.model.Book;
import com.example.mysqlconnectiondbexample.repository.BookRepository;

@Controller
@RequestMapping(path="/books") 
public class BookController {
	
	 @Bean
	    public WebMvcConfigurer corsConfigurer() {
	        return new WebMvcConfigurer() {
	            @Override
	            public void addCorsMappings(CorsRegistry registry) {
	                registry.addMapping("/**").allowedOrigins("*").allowedMethods("GET", "POST","PUT", "DELETE");


	            }
	        };
	    }
		
	 @Autowired 
	 private BookRepository bookrepository;
		
		@CrossOrigin()
		  @GetMapping(path="/all")
		  public @ResponseBody Iterable<Book> getAllBooks() {
		    return bookrepository.findAll();
		  }
			 
		  @GetMapping(path= "/book/{isbn}")
		  Optional<Book> one(@PathVariable BigInteger isbn) {
			  System.out.println("Get single book called");
			  
			  
		        Optional <Book> book = bookrepository.findById(isbn);
		        
		        if (book.isPresent()) {
					  System.out.println(Optional.of(book.get()));
		        	
		            return Optional.of(book.get());
		        }
		        else {
					  System.out.println("book not available");
		        	
		        	throw new ResourceNotFoundException("Resource is not found");
		        	
		        }
		        	

		    
		  }

}
